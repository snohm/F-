S-EXPRESSIONS
=============

PARTE 1 - 30 minuti

** La soluzione va scritta nel file sexp1.fsx  **

A s-expression (sexp) is a common format for data serialization.
It consists of an arbitrary atom  or of a pair of sexp,
which are represented as a paranthesized pair
(usually separated by a dot in concrete syntax):

'a sexp ::=  'a  | ('a sexp . 'a sexp)

For example

( "this" . (("is" . "a") . ( "s" .  "expression")) )

is a sexp of strings.

 ( ( 1 . 5 ) . 2 )

is a sexp of int. 

We use this declaration:

type 'a sexp = Atom of 'a | Pair of ('a sexp * 'a sexp)

1.  Write a function

 serialize : 'a list -> string sexp

that serializes a list into a term of type "string sexp".

Attention:
- the empty list is serialized by the string  "nil"
- cons is serialized by the string "cons" 
- each term x of the list must be converted into a string.

For example:

let s1 =  serialize [1;2] 
// Pair
//    (Atom "cons",
//      Pair (Atom "1", Pair (Atom "cons", Pair (Atom "2", Atom "nil"))))


2 Write the inverse function 
   
      unser :   string sexp -> string list

For example:

let u1 = unser s1
// val u1 : string list = ["1"; "2"]

Note that the result of unser is always a  list of string.

3. Write a Fscheck property that validates that serializing and then unserializing
a ** string** list xs  yields the the same list xs.

Hint: you will have to exclude the empty and null string from xs


4. Write a foldBack-like function 

   sfoldB : ('a -> 'a -> 'a) -> ('b -> 'a) -> 'b sexp -> 'a

  and use it to compute the number of atoms in a sexp

  count : 'a sexp -> int


