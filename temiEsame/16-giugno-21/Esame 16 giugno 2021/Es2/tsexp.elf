%{

Let's go back to the previous exercise about typed
s-expressions. Since twelf does not have polymorphism, we will
consider sexp over a generic type "i". We still want to type them,
though, and therefore we add some tags, as we did before, where the tags do what
char did.

  int      --->  a
  float    --->  b
  string   --->  c

This gives the following declarations.
}%

% type of individuals
i   : type.
i1 : i.
i2 : i.


% tags
tag : type.

a : tag.  % int
b : tag.  % float
c:  tag.  % string

% types
ty : type.

int : ty.
float : ty.
string : ty.

texp : type.

atom : tag -> i -> texp.
pair : texp -> texp -> texp.

% examples
s1 = pair (atom a i1) (atom a i2).
ill = pair (atom b i1) (atom a i2).
%{

As before he type checker satisifes these rules

  tag c corresponds to type t
---------------------------------
     atom c i : t


e1 : t         e2 : t
-----------------------
  pair e1 e2  : t


1. write the typechecker

2. give a mode definition

3. do the two typing queries for s1 and ill
}%

