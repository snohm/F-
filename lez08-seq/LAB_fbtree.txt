**  file fbtree.fsx  **

Un  *fbtree  (finitely-branching tree)* e' un albero in cui ogni nodo
puo' avere un numero arbitrario di figli.

Per rappresentare un fbtree  definiamo il tipo 

 type  'a fbtree = Node of 'a * (('a fbtree) list) 

Ogni nodo contiene una radice e la lista dei suoi sottoalberi;
se la lista e' vuota, il nodo e' un nodo foglia  (nodo senza figli).

Negli esempio faremo riferimento ai seguenti alberi.


tree1:

                     0 
                     |
        -------------- --------
        |            |          |
        1            6          7  
     -------                  ------
     | | |  |                 |    |  
     2 3 4  5                 8    10  
                              |
                              9

ltt tree1 
  = Node(0,
         [ Node(1, 
               [ Node(2,[]) ;
                 Node(3,[]) ;
                 Node(4,[]) ;
                 Node(5,[]) 
               ]) ;
           Node(6,[]) ;
           Node(7,
               [
                Node(8, [Node(9,[])]) ;
                Node(10,[])  
               ])
          ])  




tree2:

                     0 
                     |
        ------------------------
        |            |         |
        1            4         8
       / \         / | \
      2   3       5  6  7  



let tree2 = 
     Node(0,
          [ Node(1, [ Node(2,[]) ; Node(3,[]) ]) ; 
            Node(4, [ Node(5,[]) ; Node(6,[]) ; Node(7,[]) ]) ;    
            Node(8, [])
          ])      
      


  
tree3:

                  0 
                  |
        ---------------------
        |                   |        
        1            ------ 3 ------       
        |           |   |   |   |  |
        2           4   7   8   9  10   
                   / \
                  5   6



let tree3 = 
     Node(0,
          [ Node(1, [Node(2,[])]) ;
            Node(3,
               [ Node(4, [Node(5,[]); Node(6,[])]) ;
                 Node(7,[]) ;
                 Node(8,[]) ;
                 Node(9,[]) ;
                 Node(10,[])
               ])      
          ])



Nel risolvere gli esercizi, si suggerisce di usare le funzioni higher-order su liste, ad esempio: 

- List.map  (map di una funzione su una lista) 

- List.concat (data una lista di liste [xs1 ; xs2 ; ... ; xsn], costruisce la lista  xs1 @ xs2 @ ... @ xsn )

Usando opportunamente le  funzioni higher-order,  e' possibile definire ciascuna delle seguenti funzioni in una riga.

1) Definire la funzione 

  count : 'a fbtree -> int

che conta i nodi di un albero.

Esempi:

count tree1 = 11 
count tree2 = 9  
count tree3 = 11 


2) Definire la funzione

  contains : 'a -> 'a fbtree -> bool   when 'a : equality

che controlla se un  elemento  appartiene a un albero.


3)  Definire la funzione 
  
 tree2list : 'a fbtree -> 'a list

che attraversa un albero in preorder (prima la radice, poi i sottoalberi) e restituisce la lista dei nodi visitati.

Esempi:

tree2list tree1  = [0; 1; 2 ... 10] 
tree2list tree2  = [0; 1; 2 ... 8]   
tree2list tree3  = [0; 1; 2 ... 10] 

4) La ampiezza (width) di un albero e' il massimo numero  dei figli di un nodo dell'albero.

Ad esempio:

tree1 ha ampiezza 4
tree2 ha ampiezza 3
tree3 ha ampiezza 5

Definire la funzione

 width : 'a fbtree -> int

che calcola la ampiezza di un albero.


5) Scrivere e testare una proprietà FsCheck per la quale l'ampiezza di un albero *non vuoto* 
è sempre maggiore di zero

6) Scrivere una funzione 

fold (f: 'a -> 'b -> 'b) (acc: 'b) (tree: 'a fbtree): 'b 

che esegue fold della funzione f sull'albero tree con valore iniziale acc.

7) Ridefinire la funzione count via fold e testare con FsCheck che le due implementazioni coincidano.

   

